"""
Django settings for hire_synapse project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent # Ensure BASE_DIR is defined

# Basic Logging Configuration
# This sends logs to the console. You can customize handlers (e.g., FileHandler)
# and formatters for more advanced logging.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Keep Django's default loggers active
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {module}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO', # Log INFO level and above (INFO, WARNING, ERROR, CRITICAL)
            'class': 'logging.StreamHandler', # Output to console (stderr)
            'formatter': 'simple', # Use the simple format
        },
        # Example File Handler (Optional - uncomment and configure path)
        # 'file': {
        #     'level': 'INFO',
        #     'class': 'logging.FileHandler',
        #     'filename': os.path.join(BASE_DIR, 'logs/django.log'), # Create a 'logs' directory first
        #     'formatter': 'verbose',
        # },
    },
    'loggers': {
        'django': { # Django's internal logger
            'handlers': ['console'], # Send Django logs to console
            'level': 'INFO', # Or 'WARNING' to reduce noise
            'propagate': True,
        },
        # Logger for your specific apps (adjust level as needed)
        'profiles': {
            'handlers': ['console'], # Send 'profiles' app logs to console
            'level': 'INFO', # Or 'DEBUG' during development
            'propagate': False, # Don't pass to parent loggers
        },
        'documents': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'jobs': { # Logger for the new jobs app
            'handlers': ['console'], # Add 'file' handler here too if using file logging
            'level': 'INFO', # Set level for this app (DEBUG, INFO, WARNING, ERROR, CRITICAL)
            'propagate': False,
        },
        # Add loggers for other apps as needed
    },
}


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-nu87tsz_vi%vh1va!b8&=dru^sd&s-e)!3)ig@n+y##g&@f8h-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'profiles',
    'documents',
    'jobs',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hire_synapse.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # ðŸ‘‡ðŸ‘‰ tell Django about the folder that contains base.html
        "DIRS": [ BASE_DIR / "templates" ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'hire_synapse.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3', # This should now work correctly
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
